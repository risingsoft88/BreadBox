//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 27 images.
  struct image {
    /// Image `BtnAddAvatar`.
    static let btnAddAvatar = Rswift.ImageResource(bundle: R.hostingBundle, name: "BtnAddAvatar")
    /// Image `BtnBackBlack`.
    static let btnBackBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "BtnBackBlack")
    /// Image `BtnBackWhite`.
    static let btnBackWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "BtnBackWhite")
    /// Image `BtnConfirm`.
    static let btnConfirm = Rswift.ImageResource(bundle: R.hostingBundle, name: "BtnConfirm")
    /// Image `BtnEye`.
    static let btnEye = Rswift.ImageResource(bundle: R.hostingBundle, name: "BtnEye")
    /// Image `BtnFacebook`.
    static let btnFacebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "BtnFacebook")
    /// Image `BtnGoogle`.
    static let btnGoogle = Rswift.ImageResource(bundle: R.hostingBundle, name: "BtnGoogle")
    /// Image `BtnLogin`.
    static let btnLogin = Rswift.ImageResource(bundle: R.hostingBundle, name: "BtnLogin")
    /// Image `BtnSignupWhite`.
    static let btnSignupWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "BtnSignupWhite")
    /// Image `BtnSignup`.
    static let btnSignup = Rswift.ImageResource(bundle: R.hostingBundle, name: "BtnSignup")
    /// Image `BtnTwitter`.
    static let btnTwitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "BtnTwitter")
    /// Image `ImgAvatarTmp`.
    static let imgAvatarTmp = Rswift.ImageResource(bundle: R.hostingBundle, name: "ImgAvatarTmp")
    /// Image `ImgLogoBlack`.
    static let imgLogoBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "ImgLogoBlack")
    /// Image `ImgLogoWhite`.
    static let imgLogoWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "ImgLogoWhite")
    /// Image `LoginBackground`.
    static let loginBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "LoginBackground")
    /// Image `OnBoarding01`.
    static let onBoarding01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "OnBoarding01")
    /// Image `OnBoarding02`.
    static let onBoarding02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "OnBoarding02")
    /// Image `OnBoarding03`.
    static let onBoarding03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "OnBoarding03")
    /// Image `OnBoarding04`.
    static let onBoarding04 = Rswift.ImageResource(bundle: R.hostingBundle, name: "OnBoarding04")
    /// Image `OnBoarding05`.
    static let onBoarding05 = Rswift.ImageResource(bundle: R.hostingBundle, name: "OnBoarding05")
    /// Image `SignUp01`.
    static let signUp01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "SignUp01")
    /// Image `SignUp02`.
    static let signUp02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "SignUp02")
    /// Image `SignUp03`.
    static let signUp03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "SignUp03")
    /// Image `SignUp04`.
    static let signUp04 = Rswift.ImageResource(bundle: R.hostingBundle, name: "SignUp04")
    /// Image `SmallLogoBlack`.
    static let smallLogoBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "SmallLogoBlack")
    /// Image `SplashScreen`.
    static let splashScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "SplashScreen")
    /// Image `img_avatar_empty`.
    static let img_avatar_empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_avatar_empty")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BtnAddAvatar", bundle: ..., traitCollection: ...)`
    static func btnAddAvatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnAddAvatar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BtnBackBlack", bundle: ..., traitCollection: ...)`
    static func btnBackBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnBackBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BtnBackWhite", bundle: ..., traitCollection: ...)`
    static func btnBackWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnBackWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BtnConfirm", bundle: ..., traitCollection: ...)`
    static func btnConfirm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnConfirm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BtnEye", bundle: ..., traitCollection: ...)`
    static func btnEye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnEye, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BtnFacebook", bundle: ..., traitCollection: ...)`
    static func btnFacebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnFacebook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BtnGoogle", bundle: ..., traitCollection: ...)`
    static func btnGoogle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnGoogle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BtnLogin", bundle: ..., traitCollection: ...)`
    static func btnLogin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnLogin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BtnSignup", bundle: ..., traitCollection: ...)`
    static func btnSignup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnSignup, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BtnSignupWhite", bundle: ..., traitCollection: ...)`
    static func btnSignupWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnSignupWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BtnTwitter", bundle: ..., traitCollection: ...)`
    static func btnTwitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnTwitter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ImgAvatarTmp", bundle: ..., traitCollection: ...)`
    static func imgAvatarTmp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgAvatarTmp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ImgLogoBlack", bundle: ..., traitCollection: ...)`
    static func imgLogoBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgLogoBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ImgLogoWhite", bundle: ..., traitCollection: ...)`
    static func imgLogoWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgLogoWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LoginBackground", bundle: ..., traitCollection: ...)`
    static func loginBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "OnBoarding01", bundle: ..., traitCollection: ...)`
    static func onBoarding01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onBoarding01, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "OnBoarding02", bundle: ..., traitCollection: ...)`
    static func onBoarding02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onBoarding02, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "OnBoarding03", bundle: ..., traitCollection: ...)`
    static func onBoarding03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onBoarding03, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "OnBoarding04", bundle: ..., traitCollection: ...)`
    static func onBoarding04(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onBoarding04, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "OnBoarding05", bundle: ..., traitCollection: ...)`
    static func onBoarding05(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onBoarding05, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SignUp01", bundle: ..., traitCollection: ...)`
    static func signUp01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signUp01, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SignUp02", bundle: ..., traitCollection: ...)`
    static func signUp02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signUp02, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SignUp03", bundle: ..., traitCollection: ...)`
    static func signUp03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signUp03, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SignUp04", bundle: ..., traitCollection: ...)`
    static func signUp04(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signUp04, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SmallLogoBlack", bundle: ..., traitCollection: ...)`
    static func smallLogoBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smallLogoBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SplashScreen", bundle: ..., traitCollection: ...)`
    static func splashScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splashScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_avatar_empty", bundle: ..., traitCollection: ...)`
    static func img_avatar_empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_avatar_empty, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "SplashScreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SplashScreen' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SignupViewController

      let bundle = R.hostingBundle
      let dashboardViewController = StoryboardViewControllerResource<DashboardViewController>(identifier: "DashboardViewController")
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "Main"
      let onboardingViewController = StoryboardViewControllerResource<OnboardingViewController>(identifier: "OnboardingViewController")
      let registerViewController = StoryboardViewControllerResource<RegisterViewController>(identifier: "RegisterViewController")
      let resetPwdViewController = StoryboardViewControllerResource<ResetPwdViewController>(identifier: "ResetPwdViewController")
      let signupViewController = StoryboardViewControllerResource<SignupViewController>(identifier: "SignupViewController")
      let termsViewController = StoryboardViewControllerResource<TermsViewController>(identifier: "TermsViewController")

      func dashboardViewController(_: Void = ()) -> DashboardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dashboardViewController)
      }

      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }

      func onboardingViewController(_: Void = ()) -> OnboardingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onboardingViewController)
      }

      func registerViewController(_: Void = ()) -> RegisterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registerViewController)
      }

      func resetPwdViewController(_: Void = ()) -> ResetPwdViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resetPwdViewController)
      }

      func signupViewController(_: Void = ()) -> SignupViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signupViewController)
      }

      func termsViewController(_: Void = ()) -> TermsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: termsViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "BtnAddAvatar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BtnAddAvatar' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BtnBackBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BtnBackBlack' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BtnBackWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BtnBackWhite' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BtnConfirm", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BtnConfirm' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BtnEye", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BtnEye' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BtnFacebook", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BtnFacebook' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BtnGoogle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BtnGoogle' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BtnLogin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BtnLogin' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BtnSignup", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BtnSignup' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BtnSignupWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BtnSignupWhite' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BtnTwitter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BtnTwitter' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ImgLogoWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ImgLogoWhite' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "LoginBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LoginBackground' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "OnBoarding01", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'OnBoarding01' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SignUp01", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SignUp01' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SmallLogoBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SmallLogoBlack' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_avatar_empty", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_avatar_empty' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().dashboardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dashboardViewController' could not be loaded from storyboard 'Main' as 'DashboardViewController'.") }
        if _R.storyboard.main().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Main' as 'LoginViewController'.") }
        if _R.storyboard.main().onboardingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onboardingViewController' could not be loaded from storyboard 'Main' as 'OnboardingViewController'.") }
        if _R.storyboard.main().registerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registerViewController' could not be loaded from storyboard 'Main' as 'RegisterViewController'.") }
        if _R.storyboard.main().resetPwdViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resetPwdViewController' could not be loaded from storyboard 'Main' as 'ResetPwdViewController'.") }
        if _R.storyboard.main().signupViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signupViewController' could not be loaded from storyboard 'Main' as 'SignupViewController'.") }
        if _R.storyboard.main().termsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'termsViewController' could not be loaded from storyboard 'Main' as 'TermsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
